[{"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\App.js":"1","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\index.js":"2","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\login\\Login.js":"3","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\categories\\Categories.js":"4","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\routines\\Routines.js":"5","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\pictograms\\Pictograms.js":"6","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\home\\Home.js":"7","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\reportWebVitals.js":"8","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\input\\Input.js":"9","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\card\\Card.js":"10","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\modal\\Modal.js":"11","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\store.js":"12","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\rootReducer.js":"13","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\categories.js":"14","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\pictograms.js":"15","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\users.js":"16","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\routines.js":"17","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\users.js":"18","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\categories.js":"19","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\users.js":"20","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\pictograms.js":"21","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\routines.js":"22","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\categories.js":"23","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\axios.js":"24","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\navigation.js":"25","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\spinner\\Spinner.js":"26","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\pictograms.js":"27","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\Paginator.js":"28","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\select\\Select.js":"29","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\new-routine\\NewRoutine.js":"30","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\routines.js":"31","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\upload-image\\UploadImage.js":"32","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\FullPaginator.js":"33","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\pictogram\\Pictogram.js":"34","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\header\\Header.js":"35","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\table\\Table.js":"36","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\templates\\categories-table\\CategoriesTable.js":"37","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\templates\\categories-search\\CategoriesSearch.js":"38","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\search-component\\SearchComponent.js":"39","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\button\\Button.js":"40"},{"size":977,"mtime":1611676725355,"results":"41","hashOfConfig":"42"},{"size":589,"mtime":1611113017222,"results":"43","hashOfConfig":"42"},{"size":1861,"mtime":1619142447755,"results":"44","hashOfConfig":"42"},{"size":5920,"mtime":1635619170600,"results":"45","hashOfConfig":"42"},{"size":3900,"mtime":1626481748748,"results":"46","hashOfConfig":"42"},{"size":11395,"mtime":1635203301982,"results":"47","hashOfConfig":"42"},{"size":135,"mtime":1610667384890,"results":"48","hashOfConfig":"49"},{"size":375,"mtime":1610601800611,"results":"50","hashOfConfig":"42"},{"size":455,"mtime":1611201453621,"results":"51","hashOfConfig":"42"},{"size":407,"mtime":1611715718580,"results":"52","hashOfConfig":"42"},{"size":401,"mtime":1611100974401,"results":"53","hashOfConfig":"42"},{"size":341,"mtime":1569079506028,"results":"54","hashOfConfig":"42"},{"size":420,"mtime":1611380594983,"results":"55","hashOfConfig":"42"},{"size":2483,"mtime":1611971063358,"results":"56","hashOfConfig":"42"},{"size":3106,"mtime":1616903163978,"results":"57","hashOfConfig":"42"},{"size":1452,"mtime":1619140588783,"results":"58","hashOfConfig":"42"},{"size":2364,"mtime":1617141845142,"results":"59","hashOfConfig":"42"},{"size":2068,"mtime":1619142147782,"results":"60","hashOfConfig":"42"},{"size":585,"mtime":1611370559027,"results":"61","hashOfConfig":"42"},{"size":275,"mtime":1571687652337,"results":"62","hashOfConfig":"42"},{"size":674,"mtime":1611966108625,"results":"63","hashOfConfig":"42"},{"size":557,"mtime":1611981878758,"results":"64","hashOfConfig":"42"},{"size":3492,"mtime":1611380537955,"results":"65","hashOfConfig":"42"},{"size":245,"mtime":1611356006555,"results":"66","hashOfConfig":"42"},{"size":267,"mtime":1618967198494,"results":"67","hashOfConfig":"42"},{"size":261,"mtime":1611194254155,"results":"68","hashOfConfig":"42"},{"size":5361,"mtime":1618965827128,"results":"69","hashOfConfig":"42"},{"size":1241,"mtime":1618777743984,"results":"70","hashOfConfig":"42"},{"size":435,"mtime":1617063993978,"results":"71","hashOfConfig":"42"},{"size":8600,"mtime":1626481750806,"results":"72","hashOfConfig":"42"},{"size":4533,"mtime":1617063779956,"results":"73","hashOfConfig":"42"},{"size":665,"mtime":1618962484016,"results":"74","hashOfConfig":"42"},{"size":4037,"mtime":1618778034796,"results":"75","hashOfConfig":"42"},{"size":417,"mtime":1611965362521,"results":"76","hashOfConfig":"42"},{"size":1517,"mtime":1626481831077,"results":"77","hashOfConfig":"42"},{"size":451,"mtime":1611194781637,"results":"78","hashOfConfig":"42"},{"size":1007,"mtime":1635203056053,"results":"79","hashOfConfig":"42"},{"size":430,"mtime":1635210496925,"results":"80","hashOfConfig":"42"},{"size":637,"mtime":1635211371351,"results":"81","hashOfConfig":"42"},{"size":389,"mtime":1635619846002,"results":"82","hashOfConfig":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"opp80x",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i4tvk5",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"85"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"85"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"85"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"85"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\App.js",[],["174","175"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\index.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\login\\Login.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\categories\\Categories.js",["176","177","178","179","180","181","182"],"import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getCategories,\r\n  addCategory,\r\n  deleteCategory,\r\n  updateCategory,\r\n} from \"../../redux/actions/categories\";\r\nimport Input from \"../../components/atoms/input/Input\";\r\nimport Spinner from \"../../components/atoms/spinner/Spinner\";\r\nimport Modal from \"../../components/molecules/modal/Modal\";\r\nimport Header from \"../../components/organisms/header/Header\";\r\nimport CategoriesTable from \"../../components/templates/categories-table/CategoriesTable\";\r\nimport CategoriesSearch from \"../../components/templates/categories-search/CategoriesSearch\";\r\nimport Button from \"../../components/atoms/button/Button\";\r\n\r\nexport default function Categories() {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.users);\r\n  const { categories } = useSelector((state) => state.categories);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategories(user));\r\n  }, [user, dispatch]);\r\n\r\n  // const initialStateCategory = {\r\n  //   id: -1,\r\n  //   attributes: {\r\n  //     description: \"\",\r\n  //   },\r\n  // };\r\n\r\n  // const [modal, setModal] = useState(false);\r\n  // const [category, setCategory] = useState(initialStateCategory);\r\n  // const [isUpdate, setIsUpdate] = useState(false);\r\n  // const [showAlert, setShowAlert] = useState(false);\r\n\r\n  // const dispatch = useDispatch();\r\n  // const { user } = useSelector((state) => state.users);\r\n  // const {\r\n  //   categories,\r\n  //   changed,\r\n  //   previousPage,\r\n  //   currentPage,\r\n  //   totalPage,\r\n  //   nextPage,\r\n  //   loadingCategories,\r\n  // } = useSelector((state) => state.categories);\r\n\r\n  // useEffect(() => {\r\n  //   changed && dispatch(getCategories(user));\r\n  // }, [changed]);\r\n\r\n  // const openModal = () => {\r\n  //   setCategory(initialStateCategory);\r\n  //   setShowAlert(false);\r\n  //   setIsUpdate(false);\r\n  //   setModal(true);\r\n  // };\r\n\r\n  // const createCategory = () => {\r\n  //   if (category.attributes.description !== \"\") {\r\n  //     isUpdate\r\n  //       ? dispatch(updateCategory(category, user))\r\n  //       : dispatch(addCategory(category, user));\r\n  //     setModal(false);\r\n  //   } else {\r\n  //     setShowAlert(true);\r\n  //   }\r\n  // };\r\n\r\n  // const updateCategoryButton = (categoryToUpdate) => {\r\n  //   setIsUpdate(true);\r\n  //   setCategory(categoryToUpdate);\r\n  //   setModal(true);\r\n  // };\r\n\r\n  // const deleteCategoryButton = (id) => {\r\n  //   if (window.confirm(\"Desea eliminar esta categoría?\")) {\r\n  //     dispatch(deleteCategory(id, user));\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <div className=\"container\">\r\n        <h1 className=\"mb-4\">Categorias</h1>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-md-6\">\r\n            <CategoriesSearch />\r\n          </div>\r\n          <div className=\"col-12 col-md-6\">\r\n            <Button\r\n              text=\"Agregar Categoria\"\r\n              type=\"primary\"\r\n              position=\"center\"\r\n              extraClassName=\"justify-content-md-end\"\r\n              onClick={() => {}}\r\n            />\r\n          </div>\r\n        </div>\r\n        <CategoriesTable categories={categories} />\r\n      </div>\r\n\r\n      {/* {modal && (\r\n        <Modal>\r\n          <h3>Ingrese el nombre de la categoría:</h3>\r\n          {showAlert && (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n              Complete el campos por favor\r\n            </div>\r\n          )}\r\n          <Input\r\n            label=\"Categoría\"\r\n            type=\"text\"\r\n            placeholer=\"Ingrese aqui su categoría...\"\r\n            value={\r\n              category.attributes !== undefined\r\n                ? category.attributes.description\r\n                : \"\"\r\n            }\r\n            onChange={(e) =>\r\n              setCategory({\r\n                ...category,\r\n                attributes: { description: e.target.value },\r\n              })\r\n            }\r\n          />\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n            }}\r\n          >\r\n            <button onClick={() => setModal(false)} className=\"btn btn-danger\">\r\n              Cancelar\r\n            </button>\r\n            <button onClick={createCategory} className=\"btn btn-primary\">\r\n              {loadingCategories ? (\r\n                <Spinner type=\"light\" />\r\n              ) : (\r\n                <span>{isUpdate ? \"Actualizar\" : \"Agregar\"}</span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"container\">\r\n        <h1 className=\"mb-4\">Categorias</h1>\r\n        <div className=\"w-100 d-flex flex-row justify-content-between mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            style={{ height: 38 }}\r\n            className=\"form-control p-1 w-50\"\r\n            placeholder=\"Buscar...\"\r\n            onChange={(e) => console.log(\"change\", e.target.value)}\r\n          />\r\n          <button onClick={openModal} className=\"btn btn-primary mb-4\">\r\n            Agregar Categoría\r\n          </button>\r\n        </div>\r\n        {loadingCategories ? (\r\n          <div className=\"d-flex flex-row\">\r\n            <Spinner />\r\n            <h3 className=\"px-3\">Cargando...</h3>\r\n          </div>\r\n        ) : categories.length > 0 ? (\r\n          <>\r\n            <Table thead={categoriesHeadTable} tbody={categoriesRow} />\r\n            <Paginator\r\n              previousPage={previousPage}\r\n              currentPage={currentPage}\r\n              totalPage={totalPage}\r\n              nextPage={nextPage}\r\n              goToPreviousPage={goToPreviousPage}\r\n              goToNextPage={goToNextPage}\r\n              goToSpecificPage={goToSpecificPage}\r\n            />\r\n          </>\r\n        ) : (\r\n          <h3>No hay categorias registradas</h3>\r\n        )}\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\routines\\Routines.js",["183"],"import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { getRoutines, deleteRoutine } from '../../redux/actions/routines';\r\nimport Pictogram from '../../components/organisms/pictogram/Pictogram';\r\nimport Header from '../../components/organisms/header/Header';\r\nimport Spinner from '../../components/atoms/spinner/Spinner';\r\n\r\nexport default function Routines() {\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector(state => state.users)\r\n    const { routines, loadingRoutines } = useSelector(state => state.routines)\r\n    \r\n    useEffect(() => {\r\n        dispatch(getRoutines(user))\r\n    }, []);\r\n\r\n    const updateRoutine = routine => {\r\n        history.push({\r\n            pathname: '/new-routine',\r\n            state: {\r\n                routine\r\n            }\r\n        })\r\n    }\r\n\r\n    const pictogramImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgiqiPQ9I_JWbO3G9OlfDjlVdcjbK05VtIMg&usqp=CAU';\r\n    const routinesList = routines.map( routine => {\r\n        return (\r\n            <div key={routine.id} className='row align-items-center mb-5'>\r\n                <div className='col-10'>\r\n                    <div className='d-flex flex-column'> \r\n                        <div className=\"d-flex flex-row align-items-center mb-3 \">   \r\n                            <i className='bi bi-circle-fill' style={{ fontSize: '1.5rem'}}></i>\r\n                            <h3 className='mx-3 mb-0'>{ routine.description }</h3>\r\n                        </div>                   \r\n                        <div className=\"d-flex flex-row align-items-center \">\r\n                            {\r\n                                routine.pictograms.map( pictogram => {\r\n                                    return (\r\n                                        <Pictogram width='15%' key={pictogram.id} img={pictogram.attributes.image_url ? `${process.env.REACT_APP_API_URL}${pictogram.attributes.image_url}` : pictogramImage} description={ pictogram.attributes.description } />\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-2'>\r\n                    <div className='d-flex flex-row justify-content-around align-items-center'>\r\n                        <i \r\n                            className='bi bi-pencil-square d-none'\r\n                            style={{ fontSize: '1.5rem'}}\r\n                            onClick={() => updateRoutine(routine)} \r\n                            >\r\n                        </i>\r\n                        <i \r\n                            className='bi bi-trash-fill'\r\n                            style={{ fontSize: '1.5rem'}}\r\n                            onClick={() => dispatch(deleteRoutine(routine, user))} \r\n                            >\r\n                        </i>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='container'>\r\n                <h1 className= 'mb-4'>Rutinas</h1>\r\n                <div className='w-100 d-flex flex-row justify-content-end mb-4'>\r\n                    <Link to='/new-routine' className='btn btn-primary'>Agregar Rutina</Link>\r\n                </div>\r\n                { \r\n                    loadingRoutines ? \r\n                        <Spinner /> :\r\n                        (\r\n                            routines.length > 0 ?\r\n                                routinesList\r\n                                :\r\n                                <h3>No hay rutinas cargadas</h3>\r\n                        )\r\n                }              \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\pictograms\\Pictograms.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCategories } from \"../../redux/actions/categories\";\r\nimport {\r\n  getPictograms,\r\n  addPictogram,\r\n  deletePictogram,\r\n  updatePictogram,\r\n} from \"../../redux/actions/pictograms\";\r\nimport Input from \"../../components/atoms/input/Input\";\r\nimport Spinner from \"../../components/atoms/spinner/Spinner\";\r\nimport Select from \"../../components/atoms/select/Select\";\r\nimport Modal from \"../../components/molecules/modal/Modal\";\r\nimport Header from \"../../components/organisms/header/Header\";\r\nimport FullPaginator from \"../../components/molecules/paginator/FullPaginator\";\r\n//import Table from \"../../components/molecules/table/Table\";\r\nimport UploadImage from \"../../components/atoms/upload-image/UploadImage\";\r\n\r\nexport default function Pictograms() {\r\n  //   const initialStatePictogram = {\r\n  //     id: -1,\r\n  //     image: null,\r\n  //     attributes: {\r\n  //       description: \"\",\r\n  //       image_url: \"\",\r\n  //     },\r\n  //     relationships: {\r\n  //       classifiable: {\r\n  //         data: {\r\n  //           id: 1,\r\n  //         },\r\n  //       },\r\n  //     },\r\n  //   };\r\n\r\n  //   const [modal, setModal] = useState(false);\r\n  //   const [pictogram, setPictogram] = useState(initialStatePictogram);\r\n  //   const [isUpdate, setIsUpdate] = useState(false);\r\n  //   const [showAlert, setShowAlert] = useState(false);\r\n  //   const [charged, setCharged] = useState(false);\r\n\r\n  //   const dispatch = useDispatch();\r\n  //   const { user } = useSelector((state) => state.users);\r\n  //   const { categories } = useSelector((state) => state.categories);\r\n  //   const {\r\n  //     pictograms,\r\n  //     changed,\r\n  //     currentPage,\r\n  //     totalPage,\r\n  //     loadingPictograms,\r\n  //   } = useSelector((state) => state.pictograms);\r\n\r\n  //   useEffect(() => {\r\n  //     dispatch(getCategories(user, 1, 999));\r\n  //   }, [dispatch, user]);\r\n\r\n  //   useEffect(() => {\r\n  //     dispatch(getPictograms(user));\r\n  //   }, [dispatch, user]);\r\n\r\n  //   useEffect(() => {\r\n  //     changed && dispatch(getPictograms(user));\r\n  //   }, [changed]);\r\n\r\n  //   const getImageURL = (place, imageURL) => {\r\n  //     switch (place) {\r\n  //       case \"table\":\r\n  //       case \"update\":\r\n  //         return `${process.env.REACT_APP_API_URL}${imageURL}`;\r\n  //       case \"add\":\r\n  //         return imageURL;\r\n  //       default:\r\n  //         return \"\";\r\n  //     }\r\n  //   };\r\n\r\n  //   const pictogramsHeadTable = [\r\n  //     \"id\",\r\n  //     \"Imagen\",\r\n  //     \"Descriptión\",\r\n  //     \"Categoría\",\r\n  //     \"\",\r\n  //     \"\",\r\n  //   ];\r\n  //   const pictogramsRow = pictograms.map((pictogramItem) => {\r\n  //     const category = categories.filter(\r\n  //       (category) =>\r\n  //         category.id === pictogramItem.relationships.classifiable.data.id\r\n  //     );\r\n  //     if (category.length > 0) {\r\n  //       const src = getImageURL(\"table\", pictogramItem.attributes.image_url);\r\n  //       return (\r\n  //         <tr key={pictogramItem.id}>\r\n  //           <th scope=\"row\" style={{ verticalAlign: \"middle\" }}>\r\n  //             {pictogramItem.id}\r\n  //           </th>\r\n  //           <td\r\n  //             style={{\r\n  //               width: 150,\r\n  //               height: 150,\r\n  //               textAlign: \"center\",\r\n  //               verticalAlign: \"middle\",\r\n  //             }}\r\n  //           >\r\n  //             <img\r\n  //               alt={pictogramItem.attributes.description}\r\n  //               src={src}\r\n  //               style={{ maxHeight: \"100%\", maxWidth: \"100%\", padding: 5 }}\r\n  //             />\r\n  //           </td>\r\n  //           <td style={{ verticalAlign: \"middle\" }}>\r\n  //             {pictogramItem.attributes.description}\r\n  //           </td>\r\n  //           <td style={{ verticalAlign: \"middle\" }}>\r\n  //             {category[0].attributes.description}\r\n  //           </td>\r\n  //           <td style={{ verticalAlign: \"middle\" }}>\r\n  //             <i\r\n  //               onClick={() => updatePictogramButton(pictogramItem)}\r\n  //               className=\"bi bi-pencil-square\"\r\n  //             ></i>\r\n  //           </td>\r\n  //           <td style={{ verticalAlign: \"middle\" }}>\r\n  //             <i\r\n  //               onClick={() => deletePictogramButton(pictogramItem.id)}\r\n  //               className=\"bi bi-trash-fill\"\r\n  //             ></i>\r\n  //           </td>\r\n  //         </tr>\r\n  //       );\r\n  //     }\r\n  //   });\r\n\r\n  //   const categoryOptions = categories.map((category) => {\r\n  //     return (\r\n  //       <option\r\n  //         key={category.id}\r\n  //         value={category.id}\r\n  //         selected={\r\n  //           pictogram.relationships !== undefined &&\r\n  //           category.id === pictogram.relationships.classifiable.data.id\r\n  //         }\r\n  //       >\r\n  //         {category.attributes.description}\r\n  //       </option>\r\n  //     );\r\n  //   });\r\n\r\n  //   const openModal = () => {\r\n  //     setPictogram(initialStatePictogram);\r\n  //     setIsUpdate(false);\r\n  //     setShowAlert(false);\r\n  //     setModal(true);\r\n  //   };\r\n\r\n  //   const setDescription = (e) => {\r\n  //     setPictogram({\r\n  //       ...pictogram,\r\n  //       attributes: { ...pictogram.attributes, description: e.target.value },\r\n  //     });\r\n  //   };\r\n\r\n  //   const uploadImagen = (e) => {\r\n  //     setCharged(true);\r\n  //     setPictogram({\r\n  //       ...pictogram,\r\n  //       image: e.target.files[0],\r\n  //       attributes: {\r\n  //         ...pictogram.attributes,\r\n  //         image_url: URL.createObjectURL(e.target.files[0]),\r\n  //       },\r\n  //     });\r\n  //   };\r\n\r\n  //   const selectCategory = (category) => {\r\n  //     setPictogram({\r\n  //       ...pictogram,\r\n  //       relationships: { classifiable: { data: { id: category } } },\r\n  //     });\r\n  //   };\r\n\r\n  //   const createPictogram = () => {\r\n  //     setShowAlert(false);\r\n  //     if (isNotValidForm()) {\r\n  //       setShowAlert(true);\r\n  //     } else {\r\n  //       isUpdate\r\n  //         ? dispatch(updatePictogram(pictogram, user))\r\n  //         : dispatch(addPictogram(pictogram, user));\r\n  //       setModal(false);\r\n  //     }\r\n  //   };\r\n\r\n  //   const isNotValidForm = () => {\r\n  //     let isNotValid = false;\r\n  //     Object.keys(pictogram).forEach((key) => {\r\n  //       if (key === \"image\") {\r\n  //         if (pictogram[key] === null) return (isNotValid = true);\r\n  //       } else {\r\n  //         if (key === \"attributes\") {\r\n  //           if (pictogram[key].description === \"\") return (isNotValid = true);\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //     return isNotValid;\r\n  //   };\r\n\r\n  //   const updatePictogramButton = (pictogramToUpdate) => {\r\n  //     setIsUpdate(true);\r\n  //     setCharged(false);\r\n  //     setPictogram(pictogramToUpdate);\r\n  //     setModal(true);\r\n  //   };\r\n\r\n  //   const deletePictogramButton = (id) => {\r\n  //     if (window.confirm(\"Desea eliminar este pictograma?\")) {\r\n  //       dispatch(deletePictogram(id, user));\r\n  //     }\r\n  //   };\r\n\r\n  //   const goToPreviousPage = () => {\r\n  //     dispatch(getPictograms(user, currentPage - 1));\r\n  //   };\r\n\r\n  //   const goToSpecificPage = (index) => {\r\n  //     dispatch(getPictograms(user, index));\r\n  //   };\r\n\r\n  //   const goToNextPage = () => {\r\n  //     dispatch(getPictograms(user, currentPage + 1));\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* {\r\n                modal && (\r\n                    <Modal>                        \r\n                        <h3>Ingrese un pictograma:</h3>\r\n                        {\r\n                            showAlert &&\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                Complete todos los campos por favor\r\n                            </div>\r\n                        }\r\n                        <Input \r\n                            label='Descripción' \r\n                            type='text' \r\n                            placeholer='Ingrese aqui su categoría...' \r\n                            value={pictogram.attributes.description}\r\n                            onChange={ e => setDescription(e) }\r\n                            />\r\n                        <UploadImage \r\n                            label='Imagen'\r\n                            type='file'\r\n                            placeholer='Suba una imagen aquí...'\r\n                            src={ charged ? pictogram.attributes.image_url : getImageURL('update',pictogram.attributes.image_url) }\r\n                            alt={pictogram.image ? pictogram.attributes.description : ''}\r\n                            onChange={ e => uploadImagen(e) }\r\n                        />\r\n                        <Select\r\n                            label='Categoría'\r\n                            options={categoryOptions}\r\n                            selected={pictogram.relationships.classifiable.data.id}\r\n                            onChange={ e => selectCategory(e.target.value)}\r\n                            />\r\n                        <div style={{display:'flex', flexDirection:'row', justifyContent:'space-around'}}>\r\n                            <button onClick={ () => setModal(false) } className='btn btn-danger mb-4'>Cancelar</button>\r\n                            <button onClick={createPictogram} className='btn btn-primary mb-4'>\r\n                                { \r\n                                    loadingPictograms ?\r\n                                        <Spinner type='light' />\r\n                                        :\r\n                                        <span>{ isUpdate ? 'Actualizar' : 'Agregar'}</span>\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                    </Modal>    \r\n                )\r\n            }                \r\n            <div className='container'>\r\n                <h1 className= 'mb-4'>Pictogramas</h1>\r\n                <div className='w-100 d-flex flex-row justify-content-between mb-4'>\r\n                    <input type='text' style={{ height: 38 }} className='form-control p-1 w-50' placeholder='Buscar...' onChange={e => console.log('change', e.target.value)} />\r\n                    <button onClick={openModal} className='btn btn-primary mb-4'>Agregar Pictograma</button>\r\n                </div>\r\n                {\r\n                    loadingPictograms ?\r\n                        <div className='d-flex flex-row'>\r\n                            <Spinner />\r\n                            <h3 className='px-3'>Cargando...</h3>\r\n                        </div>\r\n                        :\r\n                        pictograms.length > 0 ?\r\n                            <Table thead={pictogramsHeadTable} tbody={pictogramsRow} />\r\n                            :\r\n                            <h3>No hay pictogramas registrados</h3>\r\n                }\r\n                {\r\n                    pictograms.length !== 0 &&\r\n                        <FullPaginator \r\n                            currentPage={currentPage}\r\n                            totalPage={totalPage}\r\n                            goToPreviousPage={goToPreviousPage}\r\n                            goToNextPage={goToNextPage}\r\n                            goToSpecificPage={goToSpecificPage}\r\n                        />\r\n                }\r\n            </div> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\home\\Home.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\reportWebVitals.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\input\\Input.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\card\\Card.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\modal\\Modal.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\store.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\routines.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\routines.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\axios.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\navigation.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\spinner\\Spinner.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\Paginator.js",[],["199","200"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\select\\Select.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\new-routine\\NewRoutine.js",["201","202"],"import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport { getCategories } from '../../redux/actions/categories';\r\nimport { getPictograms, filterPictogramsByCategory } from '../../redux/actions/pictograms';\r\nimport { addRoutine, updateRoutine } from '../../redux/actions/routines';\r\nimport Input from '../../components/atoms/input/Input'\r\nimport Spinner from '../../components/atoms/spinner/Spinner';\r\nimport Select from '../../components/atoms/select/Select';\r\nimport Pictogram from '../../components/organisms/pictogram/Pictogram'\r\nimport Header from '../../components/organisms/header/Header';\r\n\r\nexport default function NewRoutine() {\r\n\r\n    const [ idRoutine, setIdRoutine ] = useState(0);\r\n    const [ phrase, setPhrase ] = useState([]);\r\n    const [ description, setDescription ] = useState('');\r\n    const [ categoryId, setCategoryId ] = useState(0);\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false)\r\n\r\n    const location = useLocation()\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector(state => state.users);\r\n    const { categories, loadingCategories } = useSelector(state => state.categories)\r\n    const { filteredPictograms, loadingPictograms } = useSelector(state => state.pictograms)\r\n    const { changed, lastId } = useSelector(state => state.routines)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories(user,1, 999));\r\n    }, [dispatch, user]);\r\n\r\n    useEffect(() => {\r\n        dispatch(filterPictogramsByCategory(1, user));\r\n    }, [dispatch, user]);\r\n\r\n    useEffect(() => {\r\n        if (location.state !== undefined) {\r\n            setIsUpdate(true);\r\n            setIdRoutine(location.state.routine.id);\r\n            setDescription(location.state.routine.description);\r\n            setPhrase(location.state.routine.phrase);\r\n        } else {\r\n            setIsUpdate(false);\r\n            setIdRoutine(lastId)\r\n            setDescription('');\r\n            setPhrase([]);\r\n        }\r\n    }, [location, lastId]);\r\n\r\n    const categoryOptions = categories.map( category => {\r\n        return (\r\n            <option \r\n                key={ category.id } \r\n                value={ category.id } \r\n                selected={ category.id === categoryId }\r\n                >\r\n                {category.attributes.description}\r\n            </option>\r\n        )\r\n    })\r\n\r\n    const searchPictogramsFromCategory = idCategory => {\r\n        setCategoryId(idCategory);\r\n        dispatch(filterPictogramsByCategory(idCategory, user));\r\n    }\r\n\r\n    const pictogramImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgiqiPQ9I_JWbO3G9OlfDjlVdcjbK05VtIMg&usqp=CAU';\r\n    const pictogramsCard = filteredPictograms && filteredPictograms.map(pictogram => {\r\n        return (\r\n            <Pictogram width='200px' onClick={ () => addPictogramToPhrase(pictogram)} key={pictogram.id} img={pictogram.attributes.image_url ? `${process.env.REACT_APP_API_URL}${pictogram.attributes.image_url}` : pictogramImage} description={ pictogram.attributes.description } />\r\n        )\r\n    })\r\n\r\n    const phraseCards = phrase.map( pictogram => {\r\n        return (\r\n            <Pictogram width='200px' onClick={ () => removePictogramToPhrase(pictogram)} key={pictogram.id} img={pictogram.attributes.image_url ? `${process.env.REACT_APP_API_URL}${pictogram.attributes.image_url}` : pictogramImage} description={ pictogram.attributes.description } />\r\n        )\r\n    }) \r\n\r\n    const addPictogramToPhrase = pictogram => {\r\n        setPhrase([ ...phrase, pictogram ])\r\n    }\r\n\r\n    const removePictogramToPhrase = pictogramToRemove => {\r\n        setPhrase(phrase.filter( pictogram => pictogram.id !== pictogramToRemove.id))\r\n    }\r\n\r\n    const addOrEditRoutine = () => {\r\n        if( description === '' || phrase.length === 0 ) {\r\n            window.scrollTo(0, 0)\r\n            setShowAlert(true)\r\n        } else {\r\n            setShowAlert(false)\r\n            const routine = {\r\n                description,\r\n                pictograms: phrase\r\n            }\r\n            isUpdate ? dispatch(updateRoutine(routine)) : dispatch(addRoutine(routine, user));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='container'>\r\n                <h1 className='mb-5'>Armado de Rutinas:</h1>\r\n                {\r\n\t\t\t\t\tshowAlert &&\r\n\t\t\t\t\t\t<div className=\"alert alert-danger\" role=\"alert\">\r\n\t\t\t\t\t\t\tComplete todos los campos, por favor\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n                <Input \r\n                    label='Descripción' \r\n                    type='text' placeholer='Ingrese aqui su descripción...' \r\n                    value={ description }\r\n                    onChange={ e => setDescription(e.target.value)} \r\n                    />\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 mb-5\">\r\n                        <label className='form-label mb-3'>Rutina:</label>\r\n                        <div className=\"py-3 d-flex flex-row flex-wrap border border-2 border-info rounded-2\">\r\n                            {\r\n                                phrase.length > 0 ?\r\n                                    <>\r\n                                        { phraseCards }\r\n                                    </>\r\n                                    :\r\n                                    <span className='m-2 text-muted'>Ingrese aqui sus pictogramas...</span>        \r\n                            } \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-8 mb-4\">\r\n                        {\r\n                            loadingCategories ?\r\n                                <div className='d-flex flex-row'>\r\n                                    <Spinner />\r\n                                    <h3 className='px-3'>Cargando...</h3>\r\n                                </div>\r\n                                :\r\n                                <Select\r\n                                    label='Categorías'\r\n                                    options={categoryOptions}\r\n                                    selected={categoryId}\r\n                                    onChange={ e => searchPictogramsFromCategory(e.target.value)}\r\n                                    />                \r\n                        } \r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 mb-5\">\r\n                        {\r\n                            loadingPictograms ? \r\n                                <div className='d-flex flex-row'>\r\n                                    <Spinner />\r\n                                    <h3 className='px-3'>Cargando...</h3>\r\n                                </div>\r\n                                :\r\n                                <>\r\n                                    <label className='form-label mb-3'>Pictogramas: </label>\r\n                                    <div style={{ height: 300 }} className=\"py-3 d-flex flex-row flex-wrap overflow-auto border border-3 border-dark rounded-2\">\r\n                                        {\r\n                                            filteredPictograms.length > 0 ?\r\n                                                <>\r\n                                                    { pictogramsCard }\r\n                                                </>\r\n                                                :\r\n                                                <h3>No hay resultados</h3>        \r\n                                        } \r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                            <Link to='/routines' className='btn btn-danger mb-4'>Cancelar</Link>\r\n                            <button onClick={addOrEditRoutine} className='btn btn-primary mb-4'>\r\n                                { isUpdate ? <span>Actualizar</span> : <span>Agregar</span>  }\r\n                            </button>    \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { changed && <Redirect to='/routines' /> }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\routines.js",["203"],"import {\r\n    FETCH_ROUTINES_PENDING,\r\n    FETCH_ROUTINES_SUCCESS,\r\n    FETCH_ROUTINES_ERROR,    \r\n    ADD_ROUTINE_SUCCESS,\r\n    ADD_ROUTINE_ERROR,\r\n    UPDATE_ROUTINE_SUCCESS,\r\n    UPDATE_ROUTINE_ERROR,\r\n    DELETE_ROUTINE_SUCCESS,\r\n    DELETE_ROUTINE_ERROR\r\n} from '../constants/routines';\r\nimport axiosConfig from '../../configs/axios'\r\n\r\nexport const getRoutines = ({ accessToken, client, uid }) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        try {\r\n            const routines = await getPhrasesFromAPI('routines', headers);\r\n            return dispatch({ type: FETCH_ROUTINES_SUCCESS, payload: { routines } })\r\n        } catch (err) {\r\n            console.log(err);\r\n            return dispatch({ type: FETCH_ROUTINES_ERROR, payload: { err } })\r\n        }\r\n    }\r\n}\r\n\r\nexport const getPhrasesFromAPI = async (source, headers) => {\r\n    let phrases = [];\r\n    try {\r\n        const response = await axiosConfig.get(`/admin/${source}`, headers);\r\n        console.log('resp:', response.data)\r\n        const { data } = response.data;\r\n        if(data.length > 0) {\r\n            phrases = await Promise.all(data.map( async phrase => {\r\n                const id = phrase.id;\r\n                const type = phrase.type;\r\n                const description = phrase.attributes.description;\r\n                const pictograms = await getPictogramsFromAPhrase(phrase, headers)\r\n                console.log('pics from phrase: ', pictograms);\r\n                return {\r\n                    id,\r\n                    type,\r\n                    description,\r\n                    pictograms\r\n                }\r\n            }));\r\n        }\r\n        console.log('phrases', phrases);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return phrases\r\n};\r\n\r\nconst getPictogramsFromAPhrase = async (phrase, headers) => {\r\n    let pictograms = []\r\n    try {\r\n        pictograms = await Promise.all(phrase.relationships.pictograms.data.map(async pictogram => {\r\n            const pictogramInPhrase = await getPictogramInPhrase(pictogram.id, headers);\r\n            return pictogramInPhrase\r\n        }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return pictograms;\r\n}\r\n\r\nconst getPictogramInPhrase = async (id, headers) => {\r\n    let response;\r\n    let pictogram;\r\n    try {\r\n        response = await axiosConfig.get(`/admin/pictograms/${id}`, headers);\r\n        pictogram = response.data.data;\r\n    } catch (error) {\r\n        console.log('err', error)\r\n    }\r\n    return pictogram\r\n}\r\n\r\nexport const addRoutine = (phraseToAdd, { accessToken, client, uid } ) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        const phraseRequest = {\r\n            routine: {\r\n              description: phraseToAdd.description,\r\n              pictogram_ids: phraseToAdd.pictograms.map(pictogram => pictogram.id)\r\n            }\r\n        }\r\n        try {\r\n            const response = await axiosConfig.post('/admin/routines', JSON.stringify(phraseRequest), headers);\r\n            const routine = { ...phraseToAdd, id: response.data.data.id, type: response.data.data.type }\r\n            return dispatch({ type: ADD_ROUTINE_SUCCESS, payload: { routine } });\r\n        } catch (err) {\r\n            console.log(err)\r\n            return dispatch({ type: ADD_ROUTINE_ERROR, payload: { err }})\r\n        }\r\n    }\r\n};\r\n\r\nexport const updateRoutine = ( routine ) => {\r\n    return dispatch => {\r\n        dispatch({ type: UPDATE_ROUTINE_SUCCESS, payload: { routine } });\r\n    }\r\n}\r\n\r\nexport const deleteRoutine = ( phraseToDelete, { accessToken, client, uid } ) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        try {\r\n            const response = await axiosConfig.delete(`/admin/routines/${phraseToDelete.id}`, headers);\r\n            const routine = response.data.data;\r\n            return dispatch({ type: DELETE_ROUTINE_SUCCESS, payload: { routine } });\r\n        } catch (err) {\r\n            console.log(err)\r\n            return dispatch({ type: DELETE_ROUTINE_ERROR, payload: { err } })\r\n        }\r\n        \r\n    }\r\n}","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\upload-image\\UploadImage.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\FullPaginator.js",["204"],"import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Paginator({ currentPage, totalPage, goToPreviousPage, goToNextPage, goToSpecificPage  }) {\r\n\r\n    const nextPagination = 10;\r\n    const [firstPage, setFirstPage] = useState(1)\r\n    const [first, setFirst] = useState(false);\r\n    const [last, setLast] = useState(true);\r\n    const [pages , setPages] = useState([]);\r\n\r\n    const getPagination = (start, end) => {\r\n        const pagination = [];\r\n        for (let index = start; index <= end; index++) {\r\n            pagination.push(index)    \r\n        };\r\n        return pagination\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPages(getPagination(firstPage, nextPagination));\r\n    }, [])\r\n    \r\n    const modifyPaginator = (operation) => {\r\n        const pagination = getPaginator(operation);\r\n        pagination[0] === 1 ? setFirst(false) : setFirst(true)\r\n        pagination[pagination.length - 1] === totalPage ? setLast(false) : setLast(true); \r\n        setFirstPage(pagination[0]);\r\n        setPages(pagination);\r\n    }\r\n\r\n    const getPaginator = (operation) => {\r\n        switch (operation) {\r\n            case 'add':\r\n                return pages.map( page => page + nextPagination );\r\n            case 'subtract':\r\n                return pages.map( page => page - nextPagination );\r\n            case 'first':\r\n                return getPagination(1, nextPagination);\r\n            case 'last':\r\n                return getPagination(totalPage - nextPagination, totalPage);\r\n            default:\r\n                return [];\r\n        }\r\n\r\n    }\r\n\r\n    const setSpecificPage = (index) => {\r\n        goToSpecificPage(index)\r\n    }\r\n\r\n    const pagesPaginator = pages.map( page => {\r\n        return (\r\n            <li \r\n                key={page}\r\n                style={{ cursor: 'pointer'}}\r\n                className={`page-item ${ currentPage === page ? 'active' : '' }`} \r\n                aria-current='page'\r\n                >\r\n                <span onClick={() => setSpecificPage(page)} className='page-link'>\r\n                    { page }\r\n                </span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <nav aria-label='paginator'>\r\n            <ul className='pagination justify-content-center'>\r\n                <li style={{ cursor: 'pointer'}} className={`page-item ${ currentPage === 1 ? 'disabled': '' } `}>\r\n                    <span onClick={goToPreviousPage} className='page-link'>Anterior</span>\r\n                </li>\r\n                {\r\n                    first &&\r\n                        <>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('first')} className='page-link'>{ '<<' }</span>\r\n                            </li>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('subtract')} className='page-link'>{ '<' }</span>\r\n                            </li>                            \r\n                        </>\r\n                }\r\n                { pagesPaginator }\r\n                {\r\n                    last &&\r\n                        <>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('add')} className='page-link'>{ '>' }</span>\r\n                            </li>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('last')} className='page-link'>{ '>>' }</span>\r\n                            </li>\r\n                        </>\r\n                }\r\n                <li style={{ cursor: 'pointer'}} className={`page-item ${ currentPage === totalPage ? 'disabled': '' } `}>\r\n                    <span onClick={goToNextPage} className='page-link' >Siguiente</span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\pictogram\\Pictogram.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\header\\Header.js",["205"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport navigation from '../../../configs/navigation';\r\nimport { logOut } from '../../../redux/actions/users';\r\nimport Spinner from '../../atoms/spinner/Spinner'\r\n\r\nexport default function Header() {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n    const { user, loading, login } = useSelector(state => state.users)\r\n    \r\n    useEffect(() => {\r\n        if (!login) window.location.href = '/admin'\r\n    }, [login])\r\n\r\n    const linkList = navigation.map((link, index) => (\r\n        <li className='nav-item mx-3' key={index}>\r\n            <Link className='nav-link active' to={link.goto}>{link.text}</Link>\r\n        </li>\r\n    ));\r\n\r\n    const logOutUser = () => {\r\n        dispatch(logOut(user));\r\n    }\r\n\r\n    return (\r\n        <nav className='d-fex flex-row  navbar navbar-dark bg-primary mb-4 shadow'>\r\n            <div className='container-fluid'>\r\n                <span className='navbar-brand mb-0 h1 mx-3'>SCAPA</span>\r\n                <ul className='d-flex flex-row navbar-nav'>\r\n                    { linkList }\r\n                    <li style={{ cursor: 'pointer' }} className='nav-item mx-3' onClick={logOutUser}>                        \r\n                        { loading ? <Spinner type='light' /> : <span className='nav-link active'>Salir</span> }\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>        \r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\table\\Table.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\templates\\categories-table\\CategoriesTable.js",["206","207","208","209"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCategories } from \"../../../redux/actions/categories\";\r\nimport Table from \"../../organisms/table/Table\";\r\n\r\nexport default function CategoriesTable({ categories }) {\r\n  const categoriesHeadTable = [\"id\", \"Descriptión\", \"\", \"\"];\r\n\r\n  const categoriesRow = categories.map((categoryItem) => {\r\n    return (\r\n      <tr key={categoryItem.id}>\r\n        <th scope=\"row\">{categoryItem.id}</th>\r\n        <td>{categoryItem.attributes.description}</td>\r\n        <td>\r\n          {/* <i\r\n            onClick={() => updateCategoryButton(categoryItem)}\r\n            className=\"bi bi-pencil-square\"\r\n          ></i> */}\r\n        </td>\r\n        <td>\r\n          {/* <i\r\n            onClick={() => deleteCategoryButton(categoryItem.id)}\r\n            className=\"bi bi-trash-fill\"\r\n          ></i> */}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <Table thead={categoriesHeadTable} tbody={categoriesRow} />;\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\templates\\categories-search\\CategoriesSearch.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organisms\\search-component\\SearchComponent.js",[],["210","211"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\button\\Button.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":1,"column":21,"nodeType":"218","messageId":"219","endLine":1,"endColumn":29},{"ruleId":"216","severity":1,"message":"220","line":5,"column":3,"nodeType":"218","messageId":"219","endLine":5,"endColumn":14},{"ruleId":"216","severity":1,"message":"221","line":6,"column":3,"nodeType":"218","messageId":"219","endLine":6,"endColumn":17},{"ruleId":"216","severity":1,"message":"222","line":7,"column":3,"nodeType":"218","messageId":"219","endLine":7,"endColumn":17},{"ruleId":"216","severity":1,"message":"223","line":9,"column":8,"nodeType":"218","messageId":"219","endLine":9,"endColumn":13},{"ruleId":"216","severity":1,"message":"224","line":10,"column":8,"nodeType":"218","messageId":"219","endLine":10,"endColumn":15},{"ruleId":"216","severity":1,"message":"225","line":11,"column":8,"nodeType":"218","messageId":"219","endLine":11,"endColumn":13},{"ruleId":"226","severity":1,"message":"227","line":19,"column":8,"nodeType":"228","endLine":19,"endColumn":10,"suggestions":"229"},{"ruleId":"216","severity":1,"message":"230","line":1,"column":10,"nodeType":"218","messageId":"219","endLine":1,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":1,"column":21,"nodeType":"218","messageId":"219","endLine":1,"endColumn":29},{"ruleId":"216","severity":1,"message":"231","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"232","line":2,"column":23,"nodeType":"218","messageId":"219","endLine":2,"endColumn":34},{"ruleId":"216","severity":1,"message":"233","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":23},{"ruleId":"216","severity":1,"message":"234","line":5,"column":3,"nodeType":"218","messageId":"219","endLine":5,"endColumn":16},{"ruleId":"216","severity":1,"message":"235","line":6,"column":3,"nodeType":"218","messageId":"219","endLine":6,"endColumn":15},{"ruleId":"216","severity":1,"message":"236","line":7,"column":3,"nodeType":"218","messageId":"219","endLine":7,"endColumn":18},{"ruleId":"216","severity":1,"message":"237","line":8,"column":3,"nodeType":"218","messageId":"219","endLine":8,"endColumn":18},{"ruleId":"216","severity":1,"message":"223","line":10,"column":8,"nodeType":"218","messageId":"219","endLine":10,"endColumn":13},{"ruleId":"216","severity":1,"message":"224","line":11,"column":8,"nodeType":"218","messageId":"219","endLine":11,"endColumn":15},{"ruleId":"216","severity":1,"message":"238","line":12,"column":8,"nodeType":"218","messageId":"219","endLine":12,"endColumn":14},{"ruleId":"216","severity":1,"message":"225","line":13,"column":8,"nodeType":"218","messageId":"219","endLine":13,"endColumn":13},{"ruleId":"216","severity":1,"message":"239","line":15,"column":8,"nodeType":"218","messageId":"219","endLine":15,"endColumn":21},{"ruleId":"216","severity":1,"message":"240","line":17,"column":8,"nodeType":"218","messageId":"219","endLine":17,"endColumn":19},{"ruleId":"212","replacedBy":"241"},{"ruleId":"214","replacedBy":"242"},{"ruleId":"216","severity":1,"message":"234","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":23},{"ruleId":"216","severity":1,"message":"243","line":15,"column":13,"nodeType":"218","messageId":"219","endLine":15,"endColumn":22},{"ruleId":"216","severity":1,"message":"244","line":8,"column":5,"nodeType":"218","messageId":"219","endLine":8,"endColumn":25},{"ruleId":"226","severity":1,"message":"245","line":21,"column":8,"nodeType":"228","endLine":21,"endColumn":10,"suggestions":"246"},{"ruleId":"216","severity":1,"message":"247","line":3,"column":16,"nodeType":"218","messageId":"219","endLine":3,"endColumn":24},{"ruleId":"216","severity":1,"message":"230","line":1,"column":10,"nodeType":"218","messageId":"219","endLine":1,"endColumn":19},{"ruleId":"216","severity":1,"message":"231","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"232","line":2,"column":23,"nodeType":"218","messageId":"219","endLine":2,"endColumn":34},{"ruleId":"216","severity":1,"message":"233","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":23},{"ruleId":"212","replacedBy":"248"},{"ruleId":"214","replacedBy":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'addCategory' is defined but never used.","'deleteCategory' is defined but never used.","'updateCategory' is defined but never used.","'Input' is defined but never used.","'Spinner' is defined but never used.","'Modal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["252"],"'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getCategories' is defined but never used.","'getPictograms' is defined but never used.","'addPictogram' is defined but never used.","'deletePictogram' is defined but never used.","'updatePictogram' is defined but never used.","'Select' is defined but never used.","'FullPaginator' is defined but never used.","'UploadImage' is defined but never used.",["250"],["251"],"'idRoutine' is assigned a value but never used.","'UPDATE_ROUTINE_ERROR' is defined but never used.","React Hook useEffect has a missing dependency: 'firstPage'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPages' needs the current value of 'firstPage'.",["253"],"'Redirect' is defined but never used.",["250"],["251"],"no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},"Update the dependencies array to be: [dispatch, user]",{"range":"258","text":"259"},"Update the dependencies array to be: [firstPage]",{"range":"260","text":"261"},[748,750],"[dispatch, user]",[710,712],"[firstPage]"]