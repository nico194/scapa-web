[{"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\App.js":"1","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\index.js":"2","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\login\\Login.js":"3","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\categories\\Categories.js":"4","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organims\\header\\Header.js":"5","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\routines\\Routines.js":"6","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\pictograms\\Pictograms.js":"7","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\home\\Home.js":"8","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\reportWebVitals.js":"9","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\input\\Input.js":"10","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\card\\Card.js":"11","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\modal\\Modal.js":"12","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\store.js":"13","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\rootReducer.js":"14","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\categories.js":"15","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\pictograms.js":"16","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\users.js":"17","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\routines.js":"18","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\users.js":"19","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\categories.js":"20","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\users.js":"21","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\pictograms.js":"22","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\routines.js":"23","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\categories.js":"24","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\axios.js":"25","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\navigation.js":"26","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\table\\Table.js":"27","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\spinner\\Spinner.js":"28","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\pictograms.js":"29","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\Paginator.js":"30","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\select\\Select.js":"31","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\new-routine\\NewRoutine.js":"32","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organims\\pictogram\\Pictogram.js":"33","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\routines.js":"34","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\upload-image\\UploadImage.js":"35","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\FullPaginator.js":"36"},{"size":977,"mtime":1611676725355,"results":"37","hashOfConfig":"38"},{"size":589,"mtime":1611113017222,"results":"39","hashOfConfig":"38"},{"size":1861,"mtime":1619142447755,"results":"40","hashOfConfig":"38"},{"size":6578,"mtime":1618966681425,"results":"41","hashOfConfig":"38"},{"size":1517,"mtime":1619141182837,"results":"42","hashOfConfig":"38"},{"size":3898,"mtime":1617141891331,"results":"43","hashOfConfig":"38"},{"size":10459,"mtime":1618965686948,"results":"44","hashOfConfig":"38"},{"size":135,"mtime":1610667384890,"results":"45","hashOfConfig":"46"},{"size":375,"mtime":1610601800611,"results":"47","hashOfConfig":"38"},{"size":455,"mtime":1611201453621,"results":"48","hashOfConfig":"38"},{"size":407,"mtime":1611715718580,"results":"49","hashOfConfig":"38"},{"size":401,"mtime":1611100974401,"results":"50","hashOfConfig":"38"},{"size":341,"mtime":1569079506028,"results":"51","hashOfConfig":"38"},{"size":420,"mtime":1611380594983,"results":"52","hashOfConfig":"38"},{"size":2483,"mtime":1611971063358,"results":"53","hashOfConfig":"38"},{"size":3106,"mtime":1616903163978,"results":"54","hashOfConfig":"38"},{"size":1452,"mtime":1619140588783,"results":"55","hashOfConfig":"38"},{"size":2364,"mtime":1617141845142,"results":"56","hashOfConfig":"38"},{"size":2068,"mtime":1619142147782,"results":"57","hashOfConfig":"38"},{"size":585,"mtime":1611370559027,"results":"58","hashOfConfig":"38"},{"size":275,"mtime":1571687652337,"results":"59","hashOfConfig":"38"},{"size":674,"mtime":1611966108625,"results":"60","hashOfConfig":"38"},{"size":557,"mtime":1611981878758,"results":"61","hashOfConfig":"38"},{"size":3492,"mtime":1611380537955,"results":"62","hashOfConfig":"38"},{"size":245,"mtime":1611356006555,"results":"63","hashOfConfig":"38"},{"size":267,"mtime":1618967198494,"results":"64","hashOfConfig":"38"},{"size":451,"mtime":1611194781637,"results":"65","hashOfConfig":"38"},{"size":261,"mtime":1611194254155,"results":"66","hashOfConfig":"38"},{"size":5361,"mtime":1618965827128,"results":"67","hashOfConfig":"38"},{"size":1241,"mtime":1618777743984,"results":"68","hashOfConfig":"38"},{"size":435,"mtime":1617063993978,"results":"69","hashOfConfig":"38"},{"size":8598,"mtime":1619142991364,"results":"70","hashOfConfig":"38"},{"size":417,"mtime":1611965362521,"results":"71","hashOfConfig":"38"},{"size":4533,"mtime":1617063779956,"results":"72","hashOfConfig":"38"},{"size":665,"mtime":1618962484016,"results":"73","hashOfConfig":"38"},{"size":4037,"mtime":1618778034796,"results":"74","hashOfConfig":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"opp80x",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"77"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i4tvk5",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"77"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"77"},"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\App.js",[],["153","154"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\index.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\login\\Login.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\categories\\Categories.js",["155"],"import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCategories, addCategory, deleteCategory, updateCategory } from '../../redux/actions/categories';\r\nimport Input from '../../components/atoms/input/Input';\r\nimport Spinner from '../../components/atoms/spinner/Spinner';\r\nimport Modal from '../../components/molecules/modal/Modal';\r\nimport Header from '../../components/organims/header/Header';\r\nimport Paginator from '../../components/molecules/paginator/Paginator';\r\nimport Table from '../../components/molecules/table/Table';\r\n\r\nexport default function Categories() {\r\n\r\n    const initialStateCategory = {\r\n        id: -1,\r\n        attributes: {\r\n            description: ''\r\n        }\r\n    }\r\n\r\n    const [ modal, setModal ] = useState(false); \r\n    const [ category, setCategory ] = useState(initialStateCategory);\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n    const [ showAlert, setShowAlert ] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector(state => state.users);\r\n    const { categories,\r\n            changed, \r\n            previousPage,\r\n            currentPage,\r\n            totalPage,\r\n            nextPage,\r\n            loadingCategories } = useSelector(state => state.categories)\r\n    \r\n    useEffect(() => {\r\n        dispatch(getCategories(user));\r\n    }, [dispatch, user]);\r\n\r\n    useEffect(() => {\r\n        changed && dispatch(getCategories(user));\r\n    }, [changed]);\r\n\r\n    const categoriesHeadTable = ['id', 'Descriptión', '', '']\r\n\r\n    const categoriesRow = categories.map( categoryItem => {\r\n        return (\r\n            <tr key={ categoryItem.id }>\r\n                <th scope='row'>{ categoryItem.id }</th>\r\n                <td>{ categoryItem.attributes.description}</td>\r\n                <td>\r\n                    <i onClick={() => updateCategoryButton(categoryItem)} className='bi bi-pencil-square'></i>\r\n                </td>\r\n                <td>\r\n                    <i onClick={() => deleteCategoryButton(categoryItem.id)} className='bi bi-trash-fill'></i>\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    const openModal = () => {\r\n        setCategory(initialStateCategory);\r\n        setShowAlert(false);\r\n        setIsUpdate(false);\r\n        setModal(true)\r\n    }\r\n\r\n    const createCategory = () => {\r\n        if(category.attributes.description !== '') {\r\n            isUpdate ? dispatch(updateCategory(category, user)) : dispatch(addCategory(category, user))\r\n            setModal(false);\r\n        } else {\r\n            setShowAlert(true);\r\n        }\r\n    }\r\n\r\n    const updateCategoryButton = (categoryToUpdate) =>{\r\n        setIsUpdate(true);\r\n        setCategory(categoryToUpdate)\r\n        setModal(true);\r\n    };\r\n\r\n    const deleteCategoryButton = (id) => {\r\n        if(window.confirm('Desea eliminar esta categoría?')) {\r\n            dispatch(deleteCategory(id, user));\r\n        }\r\n    }\r\n\r\n    const goToPreviousPage = () => {\r\n        dispatch(getCategories(user, currentPage - 1));\r\n    }\r\n\r\n    const goToSpecificPage = (index) => {\r\n        dispatch(getCategories(user, index));\r\n    }\r\n\r\n    const goToNextPage = () => {\r\n        dispatch(getCategories(user, currentPage + 1));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {\r\n                modal && (\r\n                    <Modal>\r\n                        <h3>Ingrese el nombre de la categoría:</h3>\r\n                        {\r\n                            showAlert &&\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                Complete el campos por favor\r\n                            </div>\r\n                        }\r\n                        <Input \r\n                            label='Categoría' \r\n                            type='text' \r\n                            placeholer='Ingrese aqui su categoría...' \r\n                            value={category.attributes !== undefined ? category.attributes.description : ''}\r\n                            onChange={ e => setCategory({ ...category, attributes: { description : e.target.value} })} />\r\n                        <div style={{display:'flex', flexDirection:'row', justifyContent:'space-around'}}>\r\n                            <button onClick={ () => setModal(false) } className='btn btn-danger'>Cancelar</button>\r\n                            <button onClick={createCategory} className='btn btn-primary'>\r\n                                { \r\n                                    loadingCategories ?\r\n                                        <Spinner type='light' />\r\n                                        :\r\n                                        <span>{ isUpdate ? 'Actualizar' : 'Agregar'}</span>\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                    </Modal>    \r\n                )\r\n            }                \r\n            <div className='container'>\r\n                <h1 className= 'mb-4'>Categorias</h1>\r\n                <div className='w-100 d-flex flex-row justify-content-end'>\r\n                    <button onClick={openModal} className='btn btn-primary mb-4'>Agregar Categoría</button>\r\n                </div>\r\n                {\r\n                    loadingCategories ?\r\n                        <div className='d-flex flex-row'>\r\n                            <Spinner />\r\n                            <h3 className='px-3'>Cargando...</h3>\r\n                        </div>\r\n                        :\r\n                        categories.length > 0 ?\r\n                            (\r\n                                <>\r\n                                    <Table thead={categoriesHeadTable} tbody={categoriesRow} />\r\n                                    <Paginator \r\n                                        previousPage={previousPage}\r\n                                        currentPage={currentPage}\r\n                                        totalPage={totalPage}\r\n                                        nextPage={nextPage}\r\n                                        goToPreviousPage={goToPreviousPage}\r\n                                        goToNextPage={goToNextPage}\r\n                                        goToSpecificPage={goToSpecificPage}\r\n                                    />\r\n                                </>\r\n                            )\r\n                            :\r\n                            <h3>No hay categorias registradas</h3>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organims\\header\\Header.js",["156"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\routines\\Routines.js",["157"],"import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { getRoutines, deleteRoutine } from '../../redux/actions/routines';\r\nimport Pictogram from '../../components/organims/pictogram/Pictogram';\r\nimport Header from '../../components/organims/header/Header';\r\nimport Spinner from '../../components/atoms/spinner/Spinner';\r\n\r\nexport default function Routines() {\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector(state => state.users)\r\n    const { routines, loadingRoutines } = useSelector(state => state.routines)\r\n    \r\n    useEffect(() => {\r\n        dispatch(getRoutines(user))\r\n    }, []);\r\n\r\n    const updateRoutine = routine => {\r\n        history.push({\r\n            pathname: '/new-routine',\r\n            state: {\r\n                routine\r\n            }\r\n        })\r\n    }\r\n\r\n    const pictogramImage = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgiqiPQ9I_JWbO3G9OlfDjlVdcjbK05VtIMg&usqp=CAU';\r\n    const routinesList = routines.map( routine => {\r\n        return (\r\n            <div key={routine.id} className='row align-items-center mb-5'>\r\n                <div className='col-10'>\r\n                    <div className='d-flex flex-column'> \r\n                        <div className=\"d-flex flex-row align-items-center mb-3 \">   \r\n                            <i className='bi bi-circle-fill' style={{ fontSize: '1.5rem'}}></i>\r\n                            <h3 className='mx-3 mb-0'>{ routine.description }</h3>\r\n                        </div>                   \r\n                        <div className=\"d-flex flex-row align-items-center \">\r\n                            {\r\n                                routine.pictograms.map( pictogram => {\r\n                                    return (\r\n                                        <Pictogram width='15%' key={pictogram.id} img={pictogram.attributes.image_url ? `${process.env.REACT_APP_API_URL}${pictogram.attributes.image_url}` : pictogramImage} description={ pictogram.attributes.description } />\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='col-2'>\r\n                    <div className='d-flex flex-row justify-content-around align-items-center'>\r\n                        <i \r\n                            className='bi bi-pencil-square d-none'\r\n                            style={{ fontSize: '1.5rem'}}\r\n                            onClick={() => updateRoutine(routine)} \r\n                            >\r\n                        </i>\r\n                        <i \r\n                            className='bi bi-trash-fill'\r\n                            style={{ fontSize: '1.5rem'}}\r\n                            onClick={() => dispatch(deleteRoutine(routine, user))} \r\n                            >\r\n                        </i>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className='container'>\r\n                <h1 className= 'mb-4'>Rutinas</h1>\r\n                <div className='w-100 d-flex flex-row justify-content-end mb-4'>\r\n                    <Link to='/new-routine' className='btn btn-primary'>Agregar Rutina</Link>\r\n                </div>\r\n                { \r\n                    loadingRoutines ? \r\n                        <Spinner /> :\r\n                        (\r\n                            routines.length > 0 ?\r\n                                routinesList\r\n                                :\r\n                                <h3>No hay rutinas cargadas</h3>\r\n                        )\r\n                }              \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\pictograms\\Pictograms.js",["158","159"],"import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCategories } from '../../redux/actions/categories';\r\nimport { getPictograms, addPictogram, deletePictogram, updatePictogram } from '../../redux/actions/pictograms';\r\nimport Input from '../../components/atoms/input/Input';\r\nimport Spinner from '../../components/atoms/spinner/Spinner';\r\nimport Select from '../../components/atoms/select/Select';\r\nimport Modal from '../../components/molecules/modal/Modal';\r\nimport Header from '../../components/organims/header/Header';\r\nimport FullPaginator from '../../components/molecules/paginator/FullPaginator';\r\nimport Table from '../../components/molecules/table/Table'\r\nimport UploadImage from '../../components/atoms/upload-image/UploadImage';\r\n\r\nexport default function Pictograms() {\r\n\r\n    const initialStatePictogram = {\r\n        id: -1,\r\n        image: null,\r\n        attributes: {\r\n            description: '',\r\n            image_url: ''\r\n        },\r\n        relationships: {\r\n            classifiable: {\r\n                data: {\r\n                    id: 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const [ modal, setModal ] = useState(false); \r\n    const [ pictogram, setPictogram ] = useState(initialStatePictogram);\r\n    const [ isUpdate, setIsUpdate ] = useState(false);\r\n    const [ showAlert, setShowAlert ] = useState(false);\r\n    const [charged, setCharged] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const { user } = useSelector(state => state.users);\r\n    const { categories } = useSelector(state => state.categories)\r\n    const { pictograms,\r\n        changed, \r\n        currentPage,\r\n        totalPage,\r\n        loadingPictograms } = useSelector(state => state.pictograms)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories(user,1, 999));\r\n    }, [dispatch, user]);\r\n        \r\n    \r\n    useEffect(() => {\r\n        dispatch(getPictograms(user));\r\n    }, [dispatch, user]);\r\n\r\n    useEffect(() => {\r\n        changed && dispatch(getPictograms(user));\r\n    }, [changed]);\r\n\r\n    const getImageURL = (place, imageURL) => {\r\n        switch (place) {\r\n            case 'table':\r\n            case 'update':\r\n                return `${process.env.REACT_APP_API_URL}${imageURL}`;\r\n            case 'add':\r\n                return imageURL;\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n    \r\n    const pictogramsHeadTable = ['id', 'Imagen', 'Descriptión', 'Categoría' ,'', '']\r\n    const pictogramsRow = pictograms.map( pictogramItem => {\r\n        const category = categories.filter( category => category.id === pictogramItem.relationships.classifiable.data.id);\r\n        if (category.length > 0) {\r\n            const src = getImageURL('table', pictogramItem.attributes.image_url);\r\n            return (\r\n                <tr key={ pictogramItem.id }>\r\n                    <th scope='row' style={{ verticalAlign: 'middle' }}>{ pictogramItem.id }</th>\r\n                    <td style={{ width: 150, height: 150, textAlign: 'center', verticalAlign: 'middle' }}>\r\n                        <img alt={ pictogramItem.attributes.description } \r\n                             src={src}  \r\n                             style={{ maxHeight: '100%', maxWidth: '100%', padding: 5}}/>\r\n                    </td>\r\n                    <td style={{ verticalAlign: 'middle' }}>{ pictogramItem.attributes.description }</td>\r\n                    <td style={{ verticalAlign: 'middle' }}>{ category[0].attributes.description }</td>\r\n                    <td style={{ verticalAlign: 'middle' }}>\r\n                        <i onClick={() => updatePictogramButton(pictogramItem)} className='bi bi-pencil-square'></i>\r\n                    </td>\r\n                    <td style={{ verticalAlign: 'middle' }}>\r\n                        <i onClick={() => deletePictogramButton(pictogramItem.id)} className='bi bi-trash-fill'></i>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        }\r\n    });\r\n\r\n    const categoryOptions = categories.map( category => {\r\n        return (\r\n            <option \r\n                key={ category.id } \r\n                value={ category.id } \r\n                selected={ pictogram.relationships !== undefined && category.id === pictogram.relationships.classifiable.data.id }\r\n                >\r\n                {category.attributes.description}\r\n            </option>\r\n        )\r\n    })\r\n    \r\n    const openModal = () => {\r\n        setPictogram(initialStatePictogram);\r\n        setIsUpdate(false);\r\n        setShowAlert(false);\r\n        setModal(true)\r\n    }\r\n\r\n    const setDescription = e => {\r\n        setPictogram({ ...pictogram, attributes: { ...pictogram.attributes, description: e.target.value }})\r\n    }\r\n    \r\n    const uploadImagen = e => {\r\n        setCharged(true);\r\n        setPictogram({ ...pictogram, image: e.target.files[0], attributes : { ...pictogram.attributes, image_url: URL.createObjectURL(e.target.files[0]) }});\r\n    }\r\n\r\n    const selectCategory = category => {\r\n        setPictogram({ ...pictogram, relationships: { classifiable: { data: { id : category } } } })\r\n    }\r\n\r\n    const createPictogram = () => {\r\n        setShowAlert(false);\r\n        if (isNotValidForm()) {\r\n            setShowAlert(true);\r\n        } else {\r\n            isUpdate ? dispatch(updatePictogram(pictogram, user)) : dispatch(addPictogram(pictogram, user))\r\n            setModal(false);\r\n        }\r\n    }\r\n\r\n    const isNotValidForm = () => {\r\n        let isNotValid = false;\r\n        Object.keys(pictogram).forEach(key => {\r\n            if (key === 'image') {\r\n                if (pictogram[key] === null) return isNotValid = true\r\n            } else {\r\n                if (key === 'attributes') {\r\n                    if (pictogram[key].description === '' ) return isNotValid = true \r\n                }\r\n            }\r\n        });\r\n        return isNotValid;\r\n    }\r\n\r\n\r\n    const updatePictogramButton = (pictogramToUpdate) =>{\r\n        setIsUpdate(true);\r\n        setCharged(false);\r\n        setPictogram(pictogramToUpdate)\r\n        setModal(true);\r\n    };\r\n\r\n    const deletePictogramButton = (id) => {\r\n        if(window.confirm('Desea eliminar este pictograma?')) {\r\n            dispatch(deletePictogram(id, user));\r\n        }\r\n    }\r\n\r\n    const goToPreviousPage = () => {\r\n        dispatch(getPictograms(user, currentPage - 1));\r\n    }\r\n\r\n    const goToSpecificPage = (index) => {\r\n        dispatch(getPictograms(user, index));\r\n    }\r\n\r\n    const goToNextPage = () => {\r\n        dispatch(getPictograms(user, currentPage + 1));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {\r\n                modal && (\r\n                    <Modal>                        \r\n                        <h3>Ingrese un pictograma:</h3>\r\n                        {\r\n                            showAlert &&\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                Complete todos los campos por favor\r\n                            </div>\r\n                        }\r\n                        <Input \r\n                            label='Descripción' \r\n                            type='text' \r\n                            placeholer='Ingrese aqui su categoría...' \r\n                            value={pictogram.attributes.description}\r\n                            onChange={ e => setDescription(e) }\r\n                            />\r\n                        <UploadImage \r\n                            label='Imagen'\r\n                            type='file'\r\n                            placeholer='Suba una imagen aquí...'\r\n                            src={ charged ? pictogram.attributes.image_url : getImageURL('update',pictogram.attributes.image_url) }\r\n                            alt={pictogram.image ? pictogram.attributes.description : ''}\r\n                            onChange={ e => uploadImagen(e) }                            \r\n                        />\r\n                        <Select\r\n                            label='Categoría'\r\n                            options={categoryOptions}\r\n                            selected={pictogram.relationships.classifiable.data.id}\r\n                            onChange={ e => selectCategory(e.target.value)}\r\n                            />\r\n                        <div style={{display:'flex', flexDirection:'row', justifyContent:'space-around'}}>\r\n                            <button onClick={ () => setModal(false) } className='btn btn-danger mb-4'>Cancelar</button>\r\n                            <button onClick={createPictogram} className='btn btn-primary mb-4'>\r\n                                { \r\n                                    loadingPictograms ?\r\n                                        <Spinner type='light' />\r\n                                        :\r\n                                        <span>{ isUpdate ? 'Actualizar' : 'Agregar'}</span>\r\n                                }\r\n                            </button>\r\n                        </div>\r\n                    </Modal>    \r\n                )\r\n            }                \r\n            <div className='container'>\r\n                <h1 className= 'mb-4'>Pictogramas</h1>\r\n                <div className='w-100 d-flex flex-row justify-content-end'>\r\n                    <button onClick={openModal} className='btn btn-primary mb-4'>Agregar Pictograma</button>\r\n                </div>\r\n                {\r\n                    loadingPictograms ?\r\n                        <div className='d-flex flex-row'>\r\n                            <Spinner />\r\n                            <h3 className='px-3'>Cargando...</h3>\r\n                        </div>\r\n                        :\r\n                        pictograms.length > 0 ?\r\n                            <Table thead={pictogramsHeadTable} tbody={pictogramsRow} />\r\n                            :\r\n                            <h3>No hay pictogramas registrados</h3>\r\n                }\r\n                {\r\n                    pictograms.length !== 0 &&\r\n                        <FullPaginator \r\n                            currentPage={currentPage}\r\n                            totalPage={totalPage}\r\n                            goToPreviousPage={goToPreviousPage}\r\n                            goToNextPage={goToNextPage}\r\n                            goToSpecificPage={goToSpecificPage}\r\n                        />\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\home\\Home.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\reportWebVitals.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\input\\Input.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\card\\Card.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\modal\\Modal.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\store.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\reducers\\routines.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\users.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\constants\\routines.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\categories.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\axios.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\configs\\navigation.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\table\\Table.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\spinner\\Spinner.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\pictograms.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\Paginator.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\select\\Select.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\pages\\new-routine\\NewRoutine.js",["160","161"],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\organims\\pictogram\\Pictogram.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\redux\\actions\\routines.js",["162"],"import {\r\n    FETCH_ROUTINES_PENDING,\r\n    FETCH_ROUTINES_SUCCESS,\r\n    FETCH_ROUTINES_ERROR,    \r\n    ADD_ROUTINE_SUCCESS,\r\n    ADD_ROUTINE_ERROR,\r\n    UPDATE_ROUTINE_SUCCESS,\r\n    UPDATE_ROUTINE_ERROR,\r\n    DELETE_ROUTINE_SUCCESS,\r\n    DELETE_ROUTINE_ERROR\r\n} from '../constants/routines';\r\nimport axiosConfig from '../../configs/axios'\r\n\r\nexport const getRoutines = ({ accessToken, client, uid }) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        try {\r\n            const routines = await getPhrasesFromAPI('routines', headers);\r\n            return dispatch({ type: FETCH_ROUTINES_SUCCESS, payload: { routines } })\r\n        } catch (err) {\r\n            console.log(err);\r\n            return dispatch({ type: FETCH_ROUTINES_ERROR, payload: { err } })\r\n        }\r\n    }\r\n}\r\n\r\nexport const getPhrasesFromAPI = async (source, headers) => {\r\n    let phrases = [];\r\n    try {\r\n        const response = await axiosConfig.get(`/admin/${source}`, headers);\r\n        console.log('resp:', response.data)\r\n        const { data } = response.data;\r\n        if(data.length > 0) {\r\n            phrases = await Promise.all(data.map( async phrase => {\r\n                const id = phrase.id;\r\n                const type = phrase.type;\r\n                const description = phrase.attributes.description;\r\n                const pictograms = await getPictogramsFromAPhrase(phrase, headers)\r\n                console.log('pics from phrase: ', pictograms);\r\n                return {\r\n                    id,\r\n                    type,\r\n                    description,\r\n                    pictograms\r\n                }\r\n            }));\r\n        }\r\n        console.log('phrases', phrases);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return phrases\r\n};\r\n\r\nconst getPictogramsFromAPhrase = async (phrase, headers) => {\r\n    let pictograms = []\r\n    try {\r\n        pictograms = await Promise.all(phrase.relationships.pictograms.data.map(async pictogram => {\r\n            const pictogramInPhrase = await getPictogramInPhrase(pictogram.id, headers);\r\n            return pictogramInPhrase\r\n        }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return pictograms;\r\n}\r\n\r\nconst getPictogramInPhrase = async (id, headers) => {\r\n    let response;\r\n    let pictogram;\r\n    try {\r\n        response = await axiosConfig.get(`/admin/pictograms/${id}`, headers);\r\n        pictogram = response.data.data;\r\n    } catch (error) {\r\n        console.log('err', error)\r\n    }\r\n    return pictogram\r\n}\r\n\r\nexport const addRoutine = (phraseToAdd, { accessToken, client, uid } ) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        const phraseRequest = {\r\n            routine: {\r\n              description: phraseToAdd.description,\r\n              pictogram_ids: phraseToAdd.pictograms.map(pictogram => pictogram.id)\r\n            }\r\n        }\r\n        try {\r\n            const response = await axiosConfig.post('/admin/routines', JSON.stringify(phraseRequest), headers);\r\n            const routine = { ...phraseToAdd, id: response.data.data.id, type: response.data.data.type }\r\n            return dispatch({ type: ADD_ROUTINE_SUCCESS, payload: { routine } });\r\n        } catch (err) {\r\n            console.log(err)\r\n            return dispatch({ type: ADD_ROUTINE_ERROR, payload: { err }})\r\n        }\r\n    }\r\n};\r\n\r\nexport const updateRoutine = ( routine ) => {\r\n    return dispatch => {\r\n        dispatch({ type: UPDATE_ROUTINE_SUCCESS, payload: { routine } });\r\n    }\r\n}\r\n\r\nexport const deleteRoutine = ( phraseToDelete, { accessToken, client, uid } ) => {\r\n    return async dispatch => {\r\n        dispatch({ type: FETCH_ROUTINES_PENDING})\r\n        const headers = { headers: {\r\n            'access-token': accessToken,\r\n            client,\r\n            uid\r\n        }}\r\n        try {\r\n            const response = await axiosConfig.delete(`/admin/routines/${phraseToDelete.id}`, headers);\r\n            const routine = response.data.data;\r\n            return dispatch({ type: DELETE_ROUTINE_SUCCESS, payload: { routine } });\r\n        } catch (err) {\r\n            console.log(err)\r\n            return dispatch({ type: DELETE_ROUTINE_ERROR, payload: { err } })\r\n        }\r\n        \r\n    }\r\n}","C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\atoms\\upload-image\\UploadImage.js",[],"C:\\Users\\nalarcon\\Documents\\projects\\scapa-web\\src\\components\\molecules\\paginator\\FullPaginator.js",["163"],"import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Paginator({ currentPage, totalPage, goToPreviousPage, goToNextPage, goToSpecificPage  }) {\r\n\r\n    const nextPagination = 10;\r\n    const [firstPage, setFirstPage] = useState(1)\r\n    const [first, setFirst] = useState(false);\r\n    const [last, setLast] = useState(true);\r\n    const [pages , setPages] = useState([]);\r\n\r\n    const getPagination = (start, end) => {\r\n        const pagination = [];\r\n        for (let index = start; index <= end; index++) {\r\n            pagination.push(index)    \r\n        };\r\n        return pagination\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPages(getPagination(firstPage, nextPagination));\r\n    }, [])\r\n    \r\n    const modifyPaginator = (operation) => {\r\n        const pagination = getPaginator(operation);\r\n        pagination[0] === 1 ? setFirst(false) : setFirst(true)\r\n        pagination[pagination.length - 1] === totalPage ? setLast(false) : setLast(true); \r\n        setFirstPage(pagination[0]);\r\n        setPages(pagination);\r\n    }\r\n\r\n    const getPaginator = (operation) => {\r\n        switch (operation) {\r\n            case 'add':\r\n                return pages.map( page => page + nextPagination );\r\n            case 'subtract':\r\n                return pages.map( page => page - nextPagination );\r\n            case 'first':\r\n                return getPagination(1, nextPagination);\r\n            case 'last':\r\n                return getPagination(totalPage - nextPagination, totalPage);\r\n            default:\r\n                return [];\r\n        }\r\n\r\n    }\r\n\r\n    const setSpecificPage = (index) => {\r\n        goToSpecificPage(index)\r\n    }\r\n\r\n    const pagesPaginator = pages.map( page => {\r\n        return (\r\n            <li \r\n                key={page}\r\n                style={{ cursor: 'pointer'}}\r\n                className={`page-item ${ currentPage === page ? 'active' : '' }`} \r\n                aria-current='page'\r\n                >\r\n                <span onClick={() => setSpecificPage(page)} className='page-link'>\r\n                    { page }\r\n                </span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <nav aria-label='paginator'>\r\n            <ul className='pagination justify-content-center'>\r\n                <li style={{ cursor: 'pointer'}} className={`page-item ${ currentPage === 1 ? 'disabled': '' } `}>\r\n                    <span onClick={goToPreviousPage} className='page-link'>Anterior</span>\r\n                </li>\r\n                {\r\n                    first &&\r\n                        <>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('first')} className='page-link'>{ '<<' }</span>\r\n                            </li>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('subtract')} className='page-link'>{ '<' }</span>\r\n                            </li>                            \r\n                        </>\r\n                }\r\n                { pagesPaginator }\r\n                {\r\n                    last &&\r\n                        <>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('add')} className='page-link'>{ '>' }</span>\r\n                            </li>\r\n                            <li style={{ cursor: 'pointer'}} className=\"page-item\">\r\n                                <span onClick={ () => modifyPaginator('last')} className='page-link'>{ '>>' }</span>\r\n                            </li>\r\n                        </>\r\n                }\r\n                <li style={{ cursor: 'pointer'}} className={`page-item ${ currentPage === totalPage ? 'disabled': '' } `}>\r\n                    <span onClick={goToNextPage} className='page-link' >Siguiente</span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":41,"column":8,"nodeType":"170","endLine":41,"endColumn":17,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":3,"column":16,"nodeType":"174","messageId":"175","endLine":3,"endColumn":24},{"ruleId":"168","severity":1,"message":"169","line":19,"column":8,"nodeType":"170","endLine":19,"endColumn":10,"suggestions":"176"},{"ruleId":"168","severity":1,"message":"169","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":17,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":73,"column":57,"nodeType":"180","messageId":"181","endLine":73,"endColumn":59},{"ruleId":"172","severity":1,"message":"182","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":23},{"ruleId":"172","severity":1,"message":"183","line":15,"column":13,"nodeType":"174","messageId":"175","endLine":15,"endColumn":22},{"ruleId":"172","severity":1,"message":"184","line":8,"column":5,"nodeType":"174","messageId":"175","endLine":8,"endColumn":25},{"ruleId":"168","severity":1,"message":"185","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":10,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["189"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar",["190"],["191"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'getPictograms' is defined but never used.","'idRoutine' is assigned a value but never used.","'UPDATE_ROUTINE_ERROR' is defined but never used.","React Hook useEffect has a missing dependency: 'firstPage'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPages' needs the current value of 'firstPage'.",["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"193","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [changed, dispatch, user]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, user]",{"range":"202","text":"203"},{"range":"204","text":"201"},"Update the dependencies array to be: [firstPage]",{"range":"205","text":"206"},[1493,1502],"[changed, dispatch, user]",[746,748],"[dispatch, user]",[2073,2082],[710,712],"[firstPage]"]